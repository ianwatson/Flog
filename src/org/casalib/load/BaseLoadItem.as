/*	CASA Lib for ActionScript 3.0	Copyright (c) 2008, Aaron Clinger & Contributors of CASA Lib	All rights reserved.		Redistribution and use in source and binary forms, with or without	modification, are permitted provided that the following conditions are met:		- Redistributions of source code must retain the above copyright notice,	  this list of conditions and the following disclaimer.		- Redistributions in binary form must reproduce the above copyright notice,	  this list of conditions and the following disclaimer in the documentation	  and/or other materials provided with the distribution.		- Neither the name of the CASA Lib nor the names of its contributors	  may be used to endorse or promote products derived from this software	  without specific prior written permission.		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE	ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE	LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE	POSSIBILITY OF SUCH DAMAGE.*/package org.casalib.load {	import org.casalib.math.Percent;	import org.casalib.process.Process;		/**		Base class used by load classes. BaseLoadItem is not designed to be used on its own and needs to be extended to function.				@author Aaron Clinger		@version 10/29/08	*/	public class BaseLoadItem extends Process {						/**			Creates a new BaseLoadItem.		*/		public function BaseLoadItem() {			super();		}				/**			Begins the loading process.		*/		override public function start():void {			super.start();		}				/**			Cancels the currently loading file from completing.		*/		override public function stop():void {			super.stop();		}				/**			The current download speed of the requested file in bytes per second.		*/		public function get Bps():int {			return -1;		}				/**			Determines if the requested file has loaded {@code true}, or hasn't finished loading {@code false}.		*/		public function get loaded():Boolean {			return false;		}				/**			Determines if the requested file is loading {@code true}, or if it isn't currently loading {@code false}.		*/		public function get loading():Boolean {			return this.running;		}				/**			Specifies if a random value name/value pair should be appended to the query string to help prevent caching {@code true}, or not append {@code false}; defaults to {@code false}.		*/		public function get preventCache():Boolean {			return false;		}				public function set preventCache(cache:Boolean):void {}				/**			The percent that the requested file has loaded.		*/		public function get progress():Percent {			return new Percent();		}				override public function destroy():void {			super.destroy();		}	}}